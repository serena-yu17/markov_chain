Write a program markov_chain.py that prompts the user to input two positive integers n and N,
and outputs N words generated by a Markov chain where a dictionary file, named dictionary.txt,
stored in the working directory, determines the probability that an n-gram (that is, a sequence of
n letters) be followed by this or that character (including the “end-of-word” character). More
precisely, assume that n = 3. Then a word c1 . . . ck is generated as follows.
• c1 is generated following the probability that, according to dictionary.txt, a word starts
with c1.
• c2 is generated following the probability that, according to dictionary.txt, a word that
starts with c1 starts with c1c2; in case c2 is the end of word marker then k = 1.
• c3 is generated following the probability that, according to dictionary.txt, a word that
starts with c1c2 starts with c1c2c3; in case c3 is the end of word marker then k = 2.
• c4 is generated following the probability that, according to dictionary.txt, a word that
contains c1c2c3 contains c1c2c3c4; in case c4 is the end of word marker then k = 3.
• c5 is generated following the probability that, according to dictionary.txt, a word that
contains c2c3c4 contains c2c3c4c5; in case c5 is the end of word marker then k = 4.
• c6 is generated following the probability that, according to dictionary.txt, a word that
contains c3c4c5 contains c3c4c5c6; in case c6 is the end of word marker then k = 5.
• . . .
The program should indicate whether the word that has been generated has been invented (because
it does not occur in dictionary.txt), or whether it has been rediscovered (because it does occur
in dictionary.txt).